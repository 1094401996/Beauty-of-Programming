package twodot5;
/**
 * find the kth largest number in two sorted arrays
 * method:
 * 在两个有序数组中进行二分搜索：时间复杂度为O（logn+logm）
 * 先比较两个数组k/2的元素，如果相等，返回
 * 否则较大的那个索引减去k/4，较小的那个索引加上k/4，继续比较。
 * 这样不停二分下去，直至两边相等或索引达到了边界（0或k）。
 * @author gengchen
 *
 */
public class extension {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[]a = {1,3,5,7,9};
		int[] b ={2,4,6,8,10};
		int k = 5;
		System.out.println(findKth1(a,b,k));
	}
	
	//time complexity: O(M + N)
	private static int findKth1(int[] a, int[] b, int k){
		int i = a.length - 1;
		int j = b.length - 1;
		int count = 0;
		int target = 0;
		while(i >= 0 && j >= 0){
			if(a[i] > b[j]){
				target = 0;
			}
			if(a[i] <= b[j]){
				target = 1;
			}
			count ++;
			if(count == k){
				break;
			}
			if(target == 0){
				i--;
			}else{
				j--;
			}
		}
		if(target == 0 ){
			return a[i];
		}else{
			return b[j];
		}
	}
	private static int findKth2(int[] a, int[] b, int k){
		int i = a.length - 1 - k/2;
		int j = b.length - 1 - k/2;

}
