package twodot5;

import java.util.Random;

public class FindKth {

	/**
	 * @param args
	 */ 
	public static void main(String[] args) {
		int [] arr = {10,3,4,5,1,2,8,7,9,6,0};
		int k = 4;
		System.out.println(arr[findKth2(arr,0,arr.length,k)]);
	}
	public static int findKth1(int[] arr, int k ){
		float max = findMax(arr);
		float min = findMin(arr);
		float mid = 0;
		while(max - min > 0.5){
			mid = (max + min) /2;
			if(find(arr, mid) >= k)
				min = mid;
			else
				max = mid;
		}
		System.out.println("max: " + max +" min: " + min);
		int kthindex = 0;
		for (int i = 0 ; i < arr.length; i++){
			if(arr[i] >= min && arr[i] <= max){
				kthindex = i;
				break;
			}
		}
		return kthindex;
	}
	
	private static int find(int [] arr, float num){
		int N = 0;
		for(int i = 0 ; i < arr.length; i++) {
			if(arr[i] >= num){
				N++;
			}
		}
		return N;
	}
	private static int findMax(int[] arr){
		int maxIndex = 0;
		for(int i = 0 ; i < arr.length; i++){
			if(arr[i] > arr[maxIndex])
				maxIndex = i;
		}
		return arr[maxIndex];
		
	}
	private static int findMin(int[] arr){
		int minIndex = 0;
		for(int i = 0 ; i < arr.length; i++){
			if(arr[i] < arr[minIndex]){
				minIndex = i;
			}
		}
		return arr[minIndex];
	}
	
	public static int findKth2(int[] arr, int left, int right ,int k ){
	
		int i = partition(arr,0,arr.length - 1) + 1;
		int j = right - i + 1; //a[i ~~ right]
		
		if(j == k ){
			return i;
		}
		if(j > k)//the kth is in the right subarray
			return findKth2(arr,i + 1, right, k);
		else{
			return findKth2(arr,left, i - 1, k - j);
		}
		
	}
	
	private void quicksort(int[]arr, int left, int right){
		if(right > left){
			int i =partition(arr, left, right);
			quicksort(arr,0,i - 1);
			quicksort£¨arr,i + 1, right);
		}
	}
	private static int partition(int[] arr, int left, int right ){
		Random r = new Random();
		int privot = left + r.nextInt(right - left + 1);
		swap(arr,privot, right);
		int i = left - 1;
		for(int j = left; j <right ; j++){
			if(arr[j] < arr[right]){
				swap(arr,j,++i);
			}
		}
		swap(arr,++i,right);
		return i;
	}
	private static void swap(int[] arr, int i , int j){
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp ;
	}

}
